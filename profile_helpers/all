# check if a shell command is valid in the current context
#
# will return true for any executable, alias, shell function, or shell built-in
is_executable() { type $1>/dev/null 2>&1; }

# Create an alias only if it doesn't overwrite an existing command.
safe_alias() { is_executable $1 || alias $1="$2"; }
safe_unalias() { [[ -n "$(alias $1)" ]] && unalias $1 }

# Dereference an alias. I.e., echo it's bare, literal contents.
alias_content() {
  if [[ -n "$(alias $1 2>/dev/null)" ]]; then
    alias $1 | sed -e "s/^[^=]\+='\|'$//g"
  else
    echo $1
  fi
}

# Some param parsing helpers--to distinguish between params that start with a hyphen (-) and those that don't
# These are mainly used in the context of a shell function by passing $@ or $* to them.

# Return the params with dashes. E.g.:
#
#   $ get_dashful 1 -2 3 -4
#   -2
#   -4
get_dashful() {
  for thing in $@; do
    case $thing in
    -*)
      echo "$thing"
      ;;
    *)
      ;;
    esac
  done
}

# Return the params without dashes. E.g.:
#
#   $ get_dashless 1 -2 3 -4
#   1
#   3
get_dashless() {
  for thing in $@; do
    case $thing in
    -*)
      ;;
    *)
      echo "$thing"
      ;;
    esac
  done
}
