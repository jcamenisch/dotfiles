if [ -z "$(git config --global user.email)" ]; then
  [[ -n "$GIT_AUTHOR_EMAIL" ]] || export GIT_AUTHOR_EMAIL="$(echo 'onjthan@aamcniechsne.t' | sed -e "s/\(.\)\(.\)\(.\)/\3\1\2/g")"
  [[ -n "$GIT_COMMITTER_EMAIL" ]] || export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
fi
if [ -z "$(git config --global user.name)" ]; then
  [[ -n "$GIT_AUTHOR_NAME" ]] || export GIT_AUTHOR_NAME=Jonathan\ Camenisch
  [[ -n "$GIT_COMMITTER_NAME" ]] || export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
fi

safe_alias cd.g 'cd $(git rev-parse --show-toplevel)'

safe_alias g git
is_executable ga || ga () { git add $* && git status; }

safe_alias gbi  "git bisect"

safe_alias gbl  "git blame"

safe_alias gb   "git branch"

# List bare branch names without asterisk (*)
gbbare() {
  git branch | rev | cut -d' ' -f1 | rev
}

# List branches with date, hash, and author name
gbdated() {
  for b in $(gbbare); do
    echo "$(git log -1 --pretty=format:'%ci %h %an' $b) $b"
  done
}

# List branches in reverse chronological order, showing date, hash, and author name
safe_alias gbs 'gbdated | sort -r'

gbcleanup() {
  branches=$@
  [[ -z "$branches" ]] && branches=$(git branch | awk '!/\*|master/ { print $1 }')

  for b in $(echo $branches); do
    if [[ -z $(git log master..$b 2>/dev/null) ]]; then
      gbnuke $b
    fi
  done
}

safe_alias gbc  "git branch --show-current"
safe_alias gbd  "git branch -d"
safe_alias gbD  "git branch -D"
safe_alias gbm  "git branch -m"
safe_alias gbmd 'git branch --merged | grep -v "\*" | xargs -n 1 git branch -d'

# if [[ $SHELL =~ zsh ]]; then
#   gbm!() { git branch -m $1 ¡$1; }
#   gbm@() { git branch -m $1 ª$1 }
# fi
safe_alias gco  "git checkout"
safe_alias gcob "git checkout -b"
safe_alias gcm  "git commit"
safe_alias gcma "git commit --amend"
safe_alias gcmm "git commit -m"

gd() {
  switches=(`get_dashful $@`)
  args=()
  for arg in `get_dashless $@`; do
    new=$(grp $arg 2>/dev/null)
    if [[ -n "$new" ]]; then
      args+=($new)
    else
      args+= $arg
    fi
  done

  git diff ${switches[@]} $args
}

safe_alias gdc  "gd --cached"
safe_alias gdcw   "gd --cached --ignore-all-space"
safe_alias gdw   "gd --ignore-all-space"
safe_alias gdm  "gd master"
gdno() {
  gd --name-only --relative $* | uniq
}
is_executable gdmbno || gdmbno() {
  gdmb --name-only --relative $* | uniq
}

is_executable gdmb || gdmb() { # Diff a branch against its merge-base with another branch
  if [[ -n "$1" ]] && git rev-parse "$1" &>/dev/null; then
    ref1=$1 && shift
    if [[ -n "$1" ]] && git rev-parse "$1" &>/dev/null; then
      ref2=$1 && shift
    fi
  fi

  [[ -z "$ref1" ]] && ref1=master
  [[ -z "$ref2" ]] && ref2=HEAD

  echo "git merge-base $ref1 $ref2"
  base=`git merge-base $ref1 $ref2`

  echo "git diff $base $ref2 $*"
  git diff $base $ref2 $*
}

safe_alias gg    "git grep"
safe_alias ggno  "git grep --name-only"
safe_alias gh    "git help"
safe_alias gl    'git log --format="%C(auto)%h %C(green)%aN%Creset %C(blue)<%ae>%n%s %C(auto)%d"'
safe_alias gl1   "gl -1"
safe_alias gldh  "gl develop..HEAD"
glxh() {
  gl $1..HEAD
}
glhx() {
  gl HEAD..$1
}
safe_alias glhd  "gl HEAD..develop"
safe_alias glhm  "gl HEAD..master"
safe_alias glmh  "gl master..HEAD"
safe_alias gls   "git ls-files"
safe_alias glsg  "git ls-files | grep"
safe_alias gm    "git merge"
safe_alias gpl   "git pull"
safe_alias gplr  "git pull --rebase"
safe_alias gps   "git push"
safe_alias gpsu  "git push -u"
safe_alias gpsuc 'git push -u origin `git branch --show-current`'

gr()  {
  opts=$(get_dashful $@)
  args=$(get_dashless $@)
  if [[ -n $args ]] || [[ -z $opts ]]; then
    args=$(grp $args)
  fi
  git rebase $opts $args
}
safe_alias grc   "git rebase --continue"

grecent() {
  declare -i default_line_count=10
  declare -i line_count=$1

  [[ $line_count == 0 ]] && line_count=$default_line_count

  git reflog | grep 'checkout: moving from' | cut -d' ' -f6 | awk '!_[$0]++' | head -$line_count
}

safe_alias grm   "git rebase master"

grp() { # git rev-parse (plus)
  switches=(`get_dashful $@`)
  args=(`get_dashless $@`)

  case ${args[1]} in
  '')
    sha=HEAD
    ;;
  o)
    sha=origin/$(git rev-parse --abbrev-ref HEAD)
    ;;
  [1-9]|[1-9][0-9])
    sha=HEAD~$args[1]
    ;;
  *)
    sha=$args[1]
  esac

  git rev-parse ${switches[@]} $sha
}

safe_alias grph  "git rev-parse HEAD"
safe_alias gruo  "git remote update origin"
safe_alias gst   "git status"
safe_alias gsh   "git stash"
safe_alias gsha  "git stash apply"
safe_alias gshl  "git stash list"
safe_alias gshp  "git stash pop"
safe_alias gsl   "git shortlog"
safe_alias gu    "git update"

if is_executable git-ftp; then
  passwd_arg=p
  [[ `uname` == "Darwin" ]] && passwd_arg=k
  alias gfp="git ftp push -$passwd_arg"
fi

is_executable gg_replace || gg_replace() {
  if [[ "$#" == "0" ]]; then
    echo 'Usage:'
    echo '  gg_replace term replacement file_mask'
    echo
    echo 'Example:'
    echo '  gg_replace cappuchino cappuccino *.html'
    echo
  else
    find=$1; shift
    replace=$1; shift

    ORIG_GLOBIGNORE=$GLOBIGNORE
    GLOBIGNORE=*.*
    
    if [[ "$#" = "0" ]]; then
      set -- ' ' $@
    fi

    while [[ "$#" -gt "0" ]]; do
      for file in `git grep -l "$find" -- $1`; do
        if [[ $(uname) = 'Darwin' ]]; then
          #for BSD flavors of sed (sorry to not check for non-Mac systems :( )
          sed -e "s/$find/$replace/g" -i '' $file
        else
          #for Linux's flavor of sed
          sed -e "s/$find/$replace/g" -i $file
        fi
      done
      shift
    done

    GLOBIGNORE=$ORIG_GLOBIGNORE
  fi
}

is_executable gg_dasherize || gg_dasherize() {
  gg_replace $1 `echo $1 | sed -e 's/_/-/g'` $2
}

# Echoes information about Git repository status when inside a Git repository
git_summary() {
  # Exit if not inside a Git repository
  ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

  # Git branch/tag, or name-rev if on detached head
  local GIT_LOCATION=${$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)#(refs/heads/|tags/)}

  local AHEAD="%{$fg[red]%}⇡NUM%{$reset_color%}"
  local BEHIND="%{$fg[cyan]%}⇣NUM%{$reset_color%}"
  local MERGING="%{$fg[magenta]%}⚡︎%{$reset_color%}"
  local UNTRACKED="%{$fg[red]%}●%{$reset_color%}"
  local MODIFIED="%{$fg[yellow]%}●%{$reset_color%}"
  local STAGED="%{$fg[green]%}●%{$reset_color%}"

  local -a DIVERGENCES
  local -a FLAGS

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    DIVERGENCES+=( "${AHEAD//NUM/$NUM_AHEAD}" )
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    DIVERGENCES+=( "${BEHIND//NUM/$NUM_BEHIND}" )
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    FLAGS+=( "$MERGING" )
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    FLAGS+=( "$UNTRACKED" )
  fi

  if ! git diff --quiet 2> /dev/null; then
    FLAGS+=( "$MODIFIED" )
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    FLAGS+=( "$STAGED" )
  fi

  local -a GIT_INFO
  GIT_INFO+=( "\033[38;5;15m±" )
  [ -n "$GIT_STATUS" ] && GIT_INFO+=( "$GIT_STATUS" )
  [[ ${#DIVERGENCES[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)DIVERGENCES}" )
  [[ ${#FLAGS[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)FLAGS}" )
  GIT_INFO+=( "\033[38;5;15m$GIT_LOCATION%{$reset_color%}" )
  echo "${(j: :)GIT_INFO}"
}

# Use alias_content helper to dereference the `vi` alias on these.
# Otherwise, the bare `vi` executable ends up getting called, which loads without the right .vimrc
is_executable vogd || vogd() {
  $(alias_content vi) -O $(gdno $@)
}

is_executable vogg || vogg() {
  $(alias_content vi) -O $(ggno $@)
}
