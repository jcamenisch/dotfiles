utoken() {
  local subdomain=$1

  if [[ -z "$subdomain" ]]; then
    echo "You must supply a subdomain, host, or url parameter."
    echo "Usage: uauth ( subdomain | hostname | url )"
    return 1
  fi

  local conffile=$HOME/.uservoice_access_tokens
  config_read $conffile $subdomain
}

uauth() {
  local subdomain=$1
  local conffile=$HOME/.uservoice_access_tokens

  if [[ -z "$subdomain" ]]; then
    echo "You must supply a subdomain, host, or url parameter."
    echo "Usage: uauth ( subdomain | hostname | url )"
    return 1
  fi

  local user
  local password
  local client_id
  local client_secret

  echo -n 'user: '
  read user
  echo -n 'password: '
  read -s password
  echo

  echo -n "client_id (see https://$subdomain.uservoice.com/admin/settings/api to create): "
  read client_id
  echo -n 'client_secret: '
  read -s client_secret
  echo

  local response=$(
    curl https://$subdomain.uservoice.com/api/v2/oauth/token \
      -X "POST" \
      -d grant_type=password \
      -d username="$user" \
      -d password="$password" \
      -d client_id="$client_id" \
      -d client_secret="$client_secret" \
      2>/dev/null
    )

  local token=$(echo $response | jq -r '.access_token')
  if [[ "$token" == null ]]; then
    echo $response
    return 1
  else
    echo config_write $conffile $subdomain $token
    config_write $conffile $subdomain $token
    echo $token
  fi
}

ucurl() {
  local subdomain=$(echo "$@" | sed -e 's".*https://\|\..*""g')
  local token=$(utoken $subdomain)
  if [[ -z "$token" ]]; then
    uauth $subdomain
    [[ $? -eq 0 ]] || return $?

    token=$(utoken $subdomain)
  fi

  curl -H "Authorization: Bearer $token" $@
}

jwtd() {
  jq -R 'split(".") |.[0:2] | map(@base64d) | map(fromjson)'
}
